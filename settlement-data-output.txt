=== Settlement-Specific Data Extraction ===

CRITICAL SETTLEMENT DATA
========================

1. CHECK T5 BUILDINGS FILE EXISTS:
-rw-r--r-- 1 runner runner 4200 Aug 26 15:35 src/model/t5/buildings.ts

2. MAIN BUILDING DATA (Required for Academy):
----------------------------------------------
src/model/base/buildings.ts-    cp: number,     // culture points base
src/model/base/buildings.ts:    building({id: ID.SAWMILL,       c: [ 520, 380, 290,  90], k: 1.80, u: 4, cp:1, t:time( 5400, 1.5,  2400), e:2, y:1, b: {[ID.CLAYPIT]: 10, [ID.MAIN_BUILDING]:5}, m:5, f: p5}),
src/model/base/buildings.ts:    building({id: ID.BRICKYARD,     c: [ 440, 480, 320,  50], k: 1.80, u: 3, cp:1, t:time( 5240, 1.5,  2400), e:2, y:1, b: {[ID.WOODJACK]:10, [ID.MAIN_BUILDING]:5}, m:5, f: p5}),
src/model/base/buildings.ts:    building({id: ID.IRONFOUNDRY,   c: [ 200, 450, 510, 120], k: 1.80, u: 6, cp:1, t:time( 6480, 1.5,  2400), e:2, y:1, b: {[ID.IRONMINE]:10, [ID.MAIN_BUILDING]:5}, m:5, f: p5}),
src/model/base/buildings.ts:    building({id: ID.GRAINMILL,     c: [ 500, 440, 380,1240], k: 1.80, u: 3, cp:1, t:time( 4240, 1.5,  2400), e:2, y:1, b: {[ID.CROPLAND]:5,  [ID.MAIN_BUILDING]:5}, m:5, f: p5}),
src/model/base/buildings.ts:    building({id: ID.BAKERY,        c: [1200,1480, 870,1600], k: 1.80, u: 4, cp:1, t:time( 6080, 1.5,  2400), e:2, y:1, b: {[ID.CROPLAND]:10, [ID.GRAINMILL]:5, [ID.MAIN_BUILDING]:5}, m:5, f: p5}),
src/model/base/buildings.ts:    building({id: ID.WAREHOUSE,     c: [ 130, 160,  90,  40], k: 1.28, u: 1, cp:1, t:time( 3875),             e:3, y:1, b: {[ID.MAIN_BUILDING]:1}, r:{m:true}, f: capacity}),
src/model/base/buildings.ts:    building({id: ID.GRANARY,       c: [  80, 100,  70,  20], k: 1.28, u: 1, cp:1, t:time( 3475),             e:3, y:1, b: {[ID.MAIN_BUILDING]:1}, r:{m:true}, f: capacity}),
src/model/base/buildings.ts:    building({id: ID.ARMORY,        c: [ 170, 200, 380, 130], k: 1.28, u: 4, cp:2, t:time( 3875),             e:12,y:2, b: {[ID.MAIN_BUILDING]:3, [ID.ACADEMY]:3}, f: mb_like}),
src/model/base/buildings.ts:    building({id: ID.BLACKSMITH,    c: [ 130, 210, 410, 130], k: 1.28, u: 4, cp:2, t:time( 3875),             e:12,y:2, b: {[ID.MAIN_BUILDING]:3, [ID.ACADEMY]:1}, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.ARENA,         c: [1750,2250,1530, 240], k: 1.28, u: 1, cp:1, t:time( 5375),             e:4, y:2, b: {[ID.RALLY_POINT]:15}, f: p10}),
src/model/base/buildings.ts:    building({id: ID.MAIN_BUILDING, c: [  70,  40,  60,  20], k: 1.28, u: 2, cp:2, t:time( 3875),             e:7, y:3, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.RALLY_POINT,   c: [ 110, 160,  90,  70], k: 1.28, u: 1, cp:1, t:time( 3875),             e:13,y:2, f: id, s: SLOT.RALLY}),
src/model/base/buildings.ts:    building({id: ID.MARKETPLACE,   c: [  80,  70, 120,  70], k: 1.28, u: 4, cp:3, t:time( 3675),             e:14,y:3, b: {[ID.MAIN_BUILDING]:3, [ID.WAREHOUSE]:1, [ID.GRANARY]:1}, f: id}),
src/model/base/buildings.ts:    building({id: ID.EMBASSY,       c: [ 180, 130, 150,  80], k: 1.28, u: 3, cp:4, t:time( 3875),             e:8, y:3, b: {[ID.MAIN_BUILDING]:1}, f: id}),
src/model/base/buildings.ts:    building({id: ID.BARRACKS,      c: [ 210, 140, 260, 120], k: 1.28, u: 4, cp:1, t:time( 3875),             e:7, y:2, b: {[ID.MAIN_BUILDING]:3, [ID.RALLY_POINT]:1}, f: train}),
src/model/base/buildings.ts-    building({id: ID.STABLES,       c: [ 260, 140, 220, 100], k: 1.28, u: 5, cp:2, t:time( 4075),             e:7, y:2, b: {[ID.ARMORY]:3, [ID.ACADEMY]:5}, f: train}),
src/model/base/buildings.ts:    building({id: ID.WORKSHOP,      c: [ 460, 510, 600, 320], k: 1.28, u: 3, cp:3, t:time( 4875),             e:7, y:2, b: {[ID.MAIN_BUILDING]:5, [ID.ACADEMY]:10}, f: train}),
src/model/base/buildings.ts:    building({id: ID.ACADEMY,       c: [ 220, 160,  90,  40], k: 1.28, u: 4, cp:4, t:time( 3875),             e:0, y:2, b: {[ID.MAIN_BUILDING]:3, [ID.BARRACKS]:3}, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.CRANNY,        c: [  40,  50,  30,  10], k: 1.28, u: 0, cp:1, t:time( 2625),             e:3, y:3, r: {m:true}, f: cranny}),

3. ACADEMY DATA (Required for Residence):
-----------------------------------------
src/model/base/buildings.ts-    cp: number,     // culture points base
src/model/base/buildings.ts:    building({id: ID.ARMORY,        c: [ 170, 200, 380, 130], k: 1.28, u: 4, cp:2, t:time( 3875),             e:12,y:2, b: {[ID.MAIN_BUILDING]:3, [ID.ACADEMY]:3}, f: mb_like}),
src/model/base/buildings.ts:    building({id: ID.BLACKSMITH,    c: [ 130, 210, 410, 130], k: 1.28, u: 4, cp:2, t:time( 3875),             e:12,y:2, b: {[ID.MAIN_BUILDING]:3, [ID.ACADEMY]:1}, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.ARENA,         c: [1750,2250,1530, 240], k: 1.28, u: 1, cp:1, t:time( 5375),             e:4, y:2, b: {[ID.RALLY_POINT]:15}, f: p10}),
src/model/base/buildings.ts-    building({id: ID.MAIN_BUILDING, c: [  70,  40,  60,  20], k: 1.28, u: 2, cp:2, t:time( 3875),             e:7, y:3, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.RALLY_POINT,   c: [ 110, 160,  90,  70], k: 1.28, u: 1, cp:1, t:time( 3875),             e:13,y:2, f: id, s: SLOT.RALLY}),
src/model/base/buildings.ts-    building({id: ID.MARKETPLACE,   c: [  80,  70, 120,  70], k: 1.28, u: 4, cp:3, t:time( 3675),             e:14,y:3, b: {[ID.MAIN_BUILDING]:3, [ID.WAREHOUSE]:1, [ID.GRANARY]:1}, f: id}),
src/model/base/buildings.ts-    building({id: ID.EMBASSY,       c: [ 180, 130, 150,  80], k: 1.28, u: 3, cp:4, t:time( 3875),             e:8, y:3, b: {[ID.MAIN_BUILDING]:1}, f: id}),
src/model/base/buildings.ts-    building({id: ID.BARRACKS,      c: [ 210, 140, 260, 120], k: 1.28, u: 4, cp:1, t:time( 3875),             e:7, y:2, b: {[ID.MAIN_BUILDING]:3, [ID.RALLY_POINT]:1}, f: train}),
src/model/base/buildings.ts:    building({id: ID.STABLES,       c: [ 260, 140, 220, 100], k: 1.28, u: 5, cp:2, t:time( 4075),             e:7, y:2, b: {[ID.ARMORY]:3, [ID.ACADEMY]:5}, f: train}),
src/model/base/buildings.ts:    building({id: ID.WORKSHOP,      c: [ 460, 510, 600, 320], k: 1.28, u: 3, cp:3, t:time( 4875),             e:7, y:2, b: {[ID.MAIN_BUILDING]:5, [ID.ACADEMY]:10}, f: train}),
src/model/base/buildings.ts:    building({id: ID.ACADEMY,       c: [ 220, 160,  90,  40], k: 1.28, u: 4, cp:4, t:time( 3875),             e:0, y:2, b: {[ID.MAIN_BUILDING]:3, [ID.BARRACKS]:3}, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.CRANNY,        c: [  40,  50,  30,  10], k: 1.28, u: 0, cp:1, t:time( 2625),             e:3, y:3, r: {m:true}, f: cranny}),
src/model/base/buildings.ts:    building({id: ID.TOWNHALL,      c: [1250,1110,1260, 600], k: 1.28, u: 4, cp:5, t:time(14375),             e:0, y:3, b: {[ID.MAIN_BUILDING]:10, [ID.ACADEMY]:10}, f: mb_like}),
src/model/base/buildings.ts-    building({id: ID.RESIDENCE,     c: [ 580, 460, 350, 180], k: 1.28, u: 1, cp:2, t:time( 3875),             e:9, y:3, b: {[ID.MAIN_BUILDING]:5, [ID.PALACE]:-1}, f: residence}),
src/model/base/buildings.ts-    building({id: ID.PALACE,        c: [ 550, 800, 750, 250], k: 1.28, u: 1, cp:5, t:time( 6875),             e:9, y:3, b: {[ID.MAIN_BUILDING]:5, [ID.EMBASSY]:1, [ID.RESIDENCE]:-1}, f: palace}),
src/model/base/buildings.ts-    [ID.CITY_WALL]:     building({id: ID.CITY_WALL,     c: [  70,  90, 170,  70],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.ROMANS}, f: wall(1.03), s: SLOT.WALL}),
src/model/base/buildings.ts-    [ID.EARTH_WALL]:    building({id: ID.EARTH_WALL,    c: [ 120, 200,   0,  80],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.TEUTONS}, f: wall(1.02), s: SLOT.WALL}),
src/model/base/buildings.ts-    [ID.PALISADE]:      building({id: ID.PALISADE,      c: [ 160, 100,  80,  60],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.GAULS}, f: wall(1.025), s: SLOT.WALL}),

4. RESIDENCE/PALACE DATA (For Settlers):
----------------------------------------
src/model/base/buildings.ts-    cp: number,     // culture points base
src/model/base/buildings.ts:    building({id: ID.RESIDENCE,     c: [ 580, 460, 350, 180], k: 1.28, u: 1, cp:2, t:time( 3875),             e:9, y:3, b: {[ID.MAIN_BUILDING]:5, [ID.PALACE]:-1}, f: residence}),
src/model/base/buildings.ts:    building({id: ID.PALACE,        c: [ 550, 800, 750, 250], k: 1.28, u: 1, cp:5, t:time( 6875),             e:9, y:3, b: {[ID.MAIN_BUILDING]:5, [ID.EMBASSY]:1, [ID.RESIDENCE]:-1}, f: palace}),
src/model/base/buildings.ts-    [ID.CITY_WALL]:     building({id: ID.CITY_WALL,     c: [  70,  90, 170,  70],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.ROMANS}, f: wall(1.03), s: SLOT.WALL}),
src/model/base/buildings.ts-    [ID.EARTH_WALL]:    building({id: ID.EARTH_WALL,    c: [ 120, 200,   0,  80],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.TEUTONS}, f: wall(1.02), s: SLOT.WALL}),
src/model/base/buildings.ts-    [ID.PALISADE]:      building({id: ID.PALISADE,      c: [ 160, 100,  80,  60],   k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.GAULS}, f: wall(1.025), s: SLOT.WALL}),
src/model/t3/buildings.ts:    [ID.STONEMASON]:    building({ id: ID.STONEMASON,   c: [ 155, 130, 125,  70],   k: 1.28, u: 2, cp:1, t:time( 5950,2),   e:5, y:2, b: {[ID.MAIN_BUILDING]:10, [ID.PALACE]:5}, r:{c:1}, f: percent(10)}),
src/model/t3/buildings.ts-    [ID.TRAPPER]:       building({ id: ID.TRAPPER,      c: [ 100, 100, 100, 100],   k: 1.28, u: 4, cp:1, t:time( 2000,0),   e:10,y:2, b: {[ID.RALLY_POINT]:1}, r:{r:TRIBES.GAULS, m:true}, f: traps}),
src/model/t3/buildings.ts-    [ID.HERO_MANSION]:  building({ id: ID.HERO_MANSION, c: [ 700, 670, 700, 240],   k: 1.33, u: 2, cp:1, t:time( 2300,0),   e:11,y:2, b: {[ID.MAIN_BUILDING]:3, [ID.RALLY_POINT]:1}, f: slots3}),
src/model/t3/buildings.ts-    [ID.GREAT_WAREHOUSE]:building({id: ID.GREAT_WAREHOUSE,c:[650,800, 450, 200],    k: 1.28, u: 1, cp:1, t:time(10875),     e:3, y:1, b: {[ID.MAIN_BUILDING]:10}, r:{m:true}, f: greatCapacity}),
src/model/t3/buildings.ts-    [ID.GREAT_GRANARY]: building({ id: ID.GREAT_GRANARY,c: [ 400, 500, 350, 100],   k: 1.28, u: 1, cp:1, t:time( 8875),     e:3, y:1, b: {[ID.MAIN_BUILDING]:10}, r:{m:true}, f: greatCapacity}),
src/model/t3/buildings.ts-    [ID.WORLD_WONDER]:  building({ id: ID.WORLD_WONDER, c:[66700,69050,72200,13200],k:1.0275,u: 1, cp:0, t:wwTime,          e:0, y:3, r: {c:-1}, m:100, f: ww, cost: wwCost }),
src/model/t4.fs/buildings.ts-    [ID.STONE_WALL]:    building({id: ID.STONE_WALL,    c: [ 110, 160,  70,  60], k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.EGYPTIANS}, f: wall4(1.025, 8), d:5, s: SLOT.WALL, nt: 'b_42_t4', dt: 'b_42_t4' }),
src/model/t4.fs/buildings.ts-    [ID.MAKESHIFT_WALL]:building({id: ID.MAKESHIFT_WALL,c: [  50,  80,  40,  30], k: 1.28, u: 0, cp:1, t:time( 3875), e:9, y:2, r: {r:TRIBES.HUNS},      f: wall4(1.015, 6), d:1, s: SLOT.WALL, nt: 'b_43_t4', dt: 'b_43_t4' }),
src/model/t4.fs/buildings.ts:    [ID.COMMAND_CENTER]:building({id: ID.COMMAND_CENTER,c: [1600,1250,1050, 200], k: 1.22, u: 1, cp:2, t:time( 3875), e:9, y:3, r: {r:TRIBES.EGYPTIANS}, f: slots3,     b: {[ID.MAIN_BUILDING]:5, [ID.RESIDENCE]:-1, [ID.PALACE]:-1} }),
src/model/t4.fs/buildings.ts-    [ID.WATERWORKS]:    building({id: ID.WATERWORKS,    c: [ 650, 670, 650, 240], k: 1.28, u: 1, cp:1, t:time( 3875), e:2, y:1, r: {r:TRIBES.HUNS},      f: percent(5), b: {[ID.HERO_MANSION]:10} }),

5. SETTLER TRAINING COSTS:
--------------------------
File: src/model/t3/units.ts

export default extend(units, [
    // more expensive settlers
    { 9: { c: [ 5800, 5300, 7200, 5500] } },
    { 9: { c: [ 7200, 5500, 5800, 6500] } },
    { 9: { c: [ 5500, 7000, 5300, 4900] } },
    // nature
    [	{a:10, di:25, dc:20, v:20, c:[0,0,0,100],u:1, t:0, p:0, i:1, rt:1800, k: 'u'},
---
File: src/model/t4/quests.ts
        bonus: { cp: 500 },
    },
    { // 15: 3 settlers
        check: { units: [,,,,,,,,,3] },
        bonus: { res: [1050, 800, 900, 750] },
    },
    { // 16: new village
        check: { villages: 2 },
---
File: src/model/t5/quests.ts
        bonus: { buildings: { [ID.RESIDENCE]: { level: 10 } } },
    },
    { // settlers
        check: { units: [9, 19, 29] },
        bonus: { races: [
            { res: [5000, 4000, 6000, 0] },
            { res: [6000, 5000, 4000, 0] },
            { res: [4500, 6000, 4500, 0] },
---

6. CULTURE POINT VALUES:
------------------------
Looking for CP generation rates...
src/model/base/buildings.ts:    cp: number,     // culture points base
src/model/t3.5/buildings.ts:    [ID.BREWERY]:       building({ id: ID.BREWERY,      c: [1460, 930,1250,1740], k: 1.40, u: 6, cp:4, t:time(11750,2), e:6, y:3, b: {[ID.ARMORY]:20, [ID.RALLY_POINT]:10}, r:{r:TRIBES.TEUTONS}, m:10, f: percent(1)}),
src/model/t3.5/buildings.ts:    [ID.HORSE_POOL]:    building({ id: ID.HORSE_POOL,   c: [ 780, 420, 660, 540], k: 1.28, u: 5, cp:3, t:time( 5950,2), e:7, y:3, b: {[ID.RALLY_POINT]:10, [ID.STABLES]:20}, r:{r:TRIBES.ROMANS}, f: percent(1)}),
src/model/t3/buildings.ts:    [ID.TRADE_OFFICE]:  building({id: ID.TRADE_OFFICE,  c: [1400,1330,1200, 400],   k: 1.28, u: 3, cp:3, t:time( 4875),     e:3, y:3, b: {[ID.MARKETPLACE]:20, [ID.STABLES]:10}, f: percent(10)}),
src/model/t3/buildings.ts:    [ID.STONEMASON]:    building({ id: ID.STONEMASON,   c: [ 155, 130, 125,  70],   k: 1.28, u: 2, cp:1, t:time( 5950,2),   e:5, y:2, b: {[ID.MAIN_BUILDING]:10, [ID.PALACE]:5}, r:{c:1}, f: percent(10)}),
src/model/t4.fs/buildings.ts:    [ID.WATERWORKS]:    building({id: ID.WATERWORKS,    c: [ 650, 670, 650, 240], k: 1.28, u: 1, cp:1, t:time( 3875), e:2, y:1, r: {r:TRIBES.HUNS},      f: percent(5), b: {[ID.HERO_MANSION]:10} }),
src/model/t4/items.ts:    cp?:   number,  // culture points

7. BUILDING PREREQUISITES:
--------------------------
src/model/base/buildings.ts:    b?: { [P: number]: number }, // prerequisites: other buildings id -> level map

8. TIME CALCULATION FUNCTIONS:
-------------------------------
const ditch = (lvl: number) => ({ defBonus: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,17,19,21,23,25,30][lvl] / 100 });

const time = (base: number, extra: number) => (mul: number[]) => (level: number) =>
    base * mul[level-1] + extra;
const timeA = (b: number) => time(b, 0)([
    1, 4.5, 15, 60, 120, 240, 360, 720, 1080, 1620,
    2160, 2700, 3240, 3960, 4500, 5400, 7200, 9000, 10800, 14400]);

// most buildings
const timeB = (base: number, extra=0) => time(base, extra)([
    3, 22.5, 48, 90, 210, 480, 720, 990, 1200, 1380,
    1680, 1980, 2340, 2640, 3060, 3420, 3960, 4680, 5400, 6120]);
// factories
const timeC = (extra = 0) => time(60, extra)([8, 25, 55, 140, 240]);

// wonder of the world
const timeW = () => time(300, 0)([
     12, 16, 20, 24, 28, 32, 36, 40, 44, 46,
     46, 47, 48, 48, 49, 50, 51, 51, 52, 53,
     54, 55, 57, 58, 59, 60, 62, 63, 64, 66,
     67, 69, 70, 72, 74, 75, 77, 79, 81, 83,
     85, 87, 89, 91, 93, 96, 98,100,103,105,
    107,110,113,115,118,121,123,126,129,132,
    135,138,141,144,147,150,154,157,160,164,
    167,171,174,178,181,185,189,193,196,200,
    204,208,212,216,220,225,229,233,237,242,
    246,251,255,260,264,269,274,278,288,576]);

9. RESOURCE FIELD LEVELS:
--------------------------
export const prod = (lvl: number) => [2,
    5, 9, 15, 22, 33, 50, 70, 100, 145, 200,
    280, 375, 495, 635, 800, 1000, 1300, 1600, 2000, 2450, 3050][lvl];
export const capacity = (lvl: number) => roundP(100)(2120 * 1.2 ** lvl - 1320);
const cranny = (lvl: number) => roundP(10)(129.17 ** (lvl-1));
const wall = (base: number) => (lvl: number) => ({ defBonus: roundP(0.001)(base ** lvl) - 1 });
const p5 = percent(5);
const p10 = percent(10);
export const train = (lvl: number) => 0.9 ** (lvl - 1);
const mb_like = (lvl: number) => 0.964 ** (lvl - 1);
const id = (lvl: number) => lvl;
export const slots2 = (lvl: number) => +(lvl >= 10) + +(lvl >= 20);
export const slots3 = (lvl: number) => +(lvl >= 10) + +(lvl >= 15) + +(lvl >= 20);
const residence = (lvl: number) => ({ slots: slots2(lvl), def: 2 * lvl ** 2 });
const palace = (lvl: number) => ({ slots: slots3(lvl), def: 2 * lvl ** 2 });

export const ID = {
    WOODJACK: 0,
    CLAYPIT: 1,
    IRONMINE: 2,
    CROPLAND: 3,

10. ACTUAL BUILDING COSTS - LET'S GET THE RAW DATA:
----------------------------------------------------
const t5buildings = extend(t4buildings, [
    { t: timeA(24), f: prod },
    { t: timeA(22), f: prod, m: 20 },
    { t: timeA(30), f: prod },
    { t: timeA(20), f: prod,  c: [  75,  90,  85,   0], m: 20 },
    { t: timeC() },
    { t: timeC() },
    { t: timeC() },
    { t: timeC() },
    { t: timeC(300) },
    { t: timeB(11.5), c: [ 140, 180, 100,   0], k: 1.33, f: capacity },
    { t: timeB(11),   c: [  80, 100,  70,  20], k: 1.33, f: capacity },
    , // old armory
    { t: timeB(13.3), c: [ 180, 250, 500, 160], nt: 'b_13s', dt:'b_13s_desc' },
    { t: timeB(26.1, 300) },
    { t: timeB(10.8), k: 1.33 },
    { t: timeB(11.5), k: 1.33 },
    { t: timeB(11.2) },
    { t: timeB(11.8), c: [ 700, 670, 700, 240], k: 1.33, c1: [ 180, 130, 150,  80], cost: altCost, e: 11 },
    { t: timeB(12),   k: 1.33 },
    { t: timeB(13),   k: 1.33 },
    { t: timeB(15.5, 600) },
    { t: timeB(11.7), k: 1.33 },
    { t: timeB(3.3) },
    { t: timeB(21.9, 600) },
    { t: timeB(14.6, 1300) },
    { t: timeB(16.7, 3600) },
    { t: timeB(22.9, 2000), c: [1440,1370,1290, 495], c1: [ 720, 685, 645, 250], cost: altCost, b: { 15: 3 }, f: treasury },
    { t: timeB(22.2, 300) },
    { t: timeB(16.3, 600) },
    { t: timeB(16.2, 600) },
    { t: timeB(11.4) },
    { t: timeB(11.4) },
    { t: timeB(11.4) },
    { t: timeB(11.6) },
    { t: timeB(25, 600), k: 1.28, m: 20 },
    { t: timeB(11.3), c: [  80, 120,  70,  90], k: 1.33 },
    , // hero mansion
    { t: timeB(16.1, 600) },
    { t: timeB(14, 600) },
    { t: timeW(), cost: wwCost }, // ww
    { t: timeB(16.9, 600) },
    // water ditch
    building({ id: ID.WATER_DITCH, c: [ 740, 850, 960, 620], k:1.28, u:4, cp:3, t:timeB(19, 300), m:20, e:9, y:3, b: {16:10, 20:20}, f: ditch, s: SLOT.DITCH }),
]);
t5buildings[ID.NATARIAN_WALL] = extend(t5buildings[ID.EARTH_WALL], {
    id: ID.NATARIAN_WALL,
    r: undefined,
});

export default t5buildings as Building[];

=== DIRECT FILE INSPECTION ===

Let's look at the actual T5 buildings file structure:
------------------------------------------------------
import { extend } from '../../utils';

import { res } from '../types';
import {
    Building as B,
    SLOT as bSLOT,
    BMethods,
    building, prod } from '../base/buildings';
import t4buildings, { ID as bID } from '../t4/buildings';

export const ID = extend(bID, {
    WATER_DITCH: 41,
    NATARIAN_WALL: 42,
});

export const SLOT = Object.assign(bSLOT, {
    DITCH: 41,
});

type Building = B & { c1?: res };

const ditch = (lvl: number) => ({ defBonus: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,17,19,21,23,25,30][lvl] / 100 });

const time = (base: number, extra: number) => (mul: number[]) => (level: number) =>
    base * mul[level-1] + extra;
const timeA = (b: number) => time(b, 0)([
    1, 4.5, 15, 60, 120, 240, 360, 720, 1080, 1620,
    2160, 2700, 3240, 3960, 4500, 5400, 7200, 9000, 10800, 14400]);

// most buildings
const timeB = (base: number, extra=0) => time(base, extra)([
    3, 22.5, 48, 90, 210, 480, 720, 990, 1200, 1380,
    1680, 1980, 2340, 2640, 3060, 3420, 3960, 4680, 5400, 6120]);
// factories
const timeC = (extra = 0) => time(60, extra)([8, 25, 55, 140, 240]);

// wonder of the world
const timeW = () => time(300, 0)([
     12, 16, 20, 24, 28, 32, 36, 40, 44, 46,
     46, 47, 48, 48, 49, 50, 51, 51, 52, 53,
     54, 55, 57, 58, 59, 60, 62, 63, 64, 66,
     67, 69, 70, 72, 74, 75, 77, 79, 81, 83,
     85, 87, 89, 91, 93, 96, 98,100,103,105,
    107,110,113,115,118,121,123,126,129,132,
    135,138,141,144,147,150,154,157,160,164,
    167,171,174,178,181,185,189,193,196,200,
    204,208,212,216,220,225,229,233,237,242,
    246,251,255,260,264,269,274,278,288,576]);

function wwCost(this: Building, level: number): res {
    return BMethods.prototype.cost.call(this, level)
        .map((r: number) => Math.min(r, 1e6));
}

function altCost(this: Building, level: number): res {
    return level === 1 ? this.c1 : BMethods.prototype.cost.call(this, level);
}

function capacity(level: number) {
    return [800,
         1200,  1700,  2300,  3100,  4000,  5000,  6300,  7700,  9600, 12000,
        14400, 18000, 22000, 26000, 32000, 38000, 45000, 55000, 66000, 80000][level];
}

function treasury(level: number) {
    return level <= 10 ? level * 10 :
           level <= 18 ? (level-6) * 250 :
                         (level-12) * 500;
}

const t5buildings = extend(t4buildings, [
    { t: timeA(24), f: prod },
    { t: timeA(22), f: prod, m: 20 },
    { t: timeA(30), f: prod },
    { t: timeA(20), f: prod,  c: [  75,  90,  85,   0], m: 20 },
    { t: timeC() },
    { t: timeC() },
    { t: timeC() },
    { t: timeC() },
    { t: timeC(300) },
    { t: timeB(11.5), c: [ 140, 180, 100,   0], k: 1.33, f: capacity },
    { t: timeB(11),   c: [  80, 100,  70,  20], k: 1.33, f: capacity },
    , // old armory
    { t: timeB(13.3), c: [ 180, 250, 500, 160], nt: 'b_13s', dt:'b_13s_desc' },
    { t: timeB(26.1, 300) },
    { t: timeB(10.8), k: 1.33 },
    { t: timeB(11.5), k: 1.33 },
    { t: timeB(11.2) },
    { t: timeB(11.8), c: [ 700, 670, 700, 240], k: 1.33, c1: [ 180, 130, 150,  80], cost: altCost, e: 11 },
    { t: timeB(12),   k: 1.33 },
    { t: timeB(13),   k: 1.33 },
    { t: timeB(15.5, 600) },
    { t: timeB(11.7), k: 1.33 },
    { t: timeB(3.3) },
    { t: timeB(21.9, 600) },
    { t: timeB(14.6, 1300) },
    { t: timeB(16.7, 3600) },
    { t: timeB(22.9, 2000), c: [1440,1370,1290, 495], c1: [ 720, 685, 645, 250], cost: altCost, b: { 15: 3 }, f: treasury },
    { t: timeB(22.2, 300) },
    { t: timeB(16.3, 600) },
    { t: timeB(16.2, 600) },
    { t: timeB(11.4) },
    { t: timeB(11.4) },
    { t: timeB(11.4) },
    { t: timeB(11.6) },
    { t: timeB(25, 600), k: 1.28, m: 20 },
    { t: timeB(11.3), c: [  80, 120,  70,  90], k: 1.33 },
    , // hero mansion
    { t: timeB(16.1, 600) },
    { t: timeB(14, 600) },
    { t: timeW(), cost: wwCost }, // ww
    { t: timeB(16.9, 600) },
    // water ditch
    building({ id: ID.WATER_DITCH, c: [ 740, 850, 960, 620], k:1.28, u:4, cp:3, t:timeB(19, 300), m:20, e:9, y:3, b: {16:10, 20:20}, f: ditch, s: SLOT.DITCH }),
]);
t5buildings[ID.NATARIAN_WALL] = extend(t5buildings[ID.EARTH_WALL], {
    id: ID.NATARIAN_WALL,
    r: undefined,
});

export default t5buildings as Building[];

=== END OF EXTRACTION ===
