const fs = require('fs');
const path = require('path');

class VersionManager {
  constructor() {
    this.manifestPath = path.resolve(__dirname, '../manifest.json');
    this.versionTsPath = path.resolve(__dirname, '../src/version.ts');
    this.packageJsonPath = path.resolve(__dirname, '../package.json');
    this.rootPackageJsonPath = path.resolve(__dirname, '../../../package.json');
    this.distManifestPath = path.resolve(__dirname, '../dist/manifest.json');
  }

  // Get current version from manifest (source of truth)
  getCurrentVersion() {
    const manifest = JSON.parse(fs.readFileSync(this.manifestPath, 'utf8'));
    return manifest.version;
  }

  // Set version across all files
  setVersion(version) {
    console.log(`[Version Manager] Setting version to ${version}`);
    
    // 1. Update manifest.json
    const manifest = JSON.parse(fs.readFileSync(this.manifestPath, 'utf8'));
    manifest.version = version;
    fs.writeFileSync(this.manifestPath, JSON.stringify(manifest, null, 2));
    
    // 2. Generate version.ts
    const versionTs = `// AUTO-GENERATED - DO NOT EDIT
// Generated by version-manager.cjs
export const VERSION = '${version}';
export const VERSION_NAME = 'TravianAssistant';
export const BUILD_DATE = '${new Date().toISOString()}';
export const BUILD_NUMBER = ${Date.now()};
`;
    fs.writeFileSync(this.versionTsPath, versionTs);
    
    // 3. Update package.json files
    this.updatePackageJson(this.packageJsonPath, version);
    this.updatePackageJson(this.rootPackageJsonPath, version);
    
    // 4. Update dist manifest if exists
    if (fs.existsSync(this.distManifestPath)) {
      const distManifest = JSON.parse(fs.readFileSync(this.distManifestPath, 'utf8'));
      distManifest.version = version;
      fs.writeFileSync(this.distManifestPath, JSON.stringify(distManifest, null, 2));
    }
    
    console.log(`[Version Manager] Version ${version} applied to all files`);
  }

  updatePackageJson(filePath, version) {
    if (fs.existsSync(filePath)) {
      const pkg = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      pkg.version = version;
      fs.writeFileSync(filePath, JSON.stringify(pkg, null, 2));
    }
  }

  // Increment version
  bump(type = 'patch') {
    const current = this.getCurrentVersion();
    const [major, minor, patch] = current.split('.').map(Number);
    
    let newVersion;
    switch(type) {
      case 'major':
        newVersion = `${major + 1}.0.0`;
        break;
      case 'minor':
        newVersion = `${major}.${minor + 1}.0`;
        break;
      case 'patch':
      default:
        newVersion = `${major}.${minor}.${patch + 1}`;
    }
    
    this.setVersion(newVersion);
    return newVersion;
  }

  // Validate all versions match
  validate() {
    const manifestVersion = this.getCurrentVersion();
    const errors = [];
    
    // Check version.ts
    if (fs.existsSync(this.versionTsPath)) {
      const versionTs = fs.readFileSync(this.versionTsPath, 'utf8');
      const match = versionTs.match(/VERSION = '([^']+)'/);
      if (match && match[1] !== manifestVersion) {
        errors.push(`version.ts has ${match[1]}, manifest has ${manifestVersion}`);
      }
    }
    
    // Check package.json files
    const checkPackageJson = (path, name) => {
      if (fs.existsSync(path)) {
        const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
        if (pkg.version !== manifestVersion) {
          errors.push(`${name} has ${pkg.version}, manifest has ${manifestVersion}`);
        }
      }
    };
    
    checkPackageJson(this.packageJsonPath, 'extension package.json');
    checkPackageJson(this.rootPackageJsonPath, 'root package.json');
    
    if (errors.length > 0) {
      console.error('[Version Manager] Version mismatches found:');
      errors.forEach(e => console.error(`  - ${e}`));
      return false;
    }
    
    console.log(`[Version Manager] âœ“ All versions match: ${manifestVersion}`);
    return true;
  }
}

// CLI interface
if (require.main === module) {
  const vm = new VersionManager();
  const command = process.argv[2];
  const arg = process.argv[3];
  
  switch(command) {
    case 'get':
      console.log(vm.getCurrentVersion());
      break;
    case 'set':
      if (!arg) {
        console.error('Usage: node version-manager.cjs set <version>');
        process.exit(1);
      }
      vm.setVersion(arg);
      break;
    case 'bump':
      const type = arg || 'patch';
      const newVersion = vm.bump(type);
      console.log(`Bumped to ${newVersion}`);
      break;
    case 'validate':
      const isValid = vm.validate();
      process.exit(isValid ? 0 : 1);
      break;
    case 'sync':
      // Force sync all files to manifest version
      const version = vm.getCurrentVersion();
      vm.setVersion(version);
      console.log(`Synced all files to ${version}`);
      break;
    default:
      console.log('Commands: get, set <version>, bump [major|minor|patch], validate, sync');
  }
}

module.exports = VersionManager;