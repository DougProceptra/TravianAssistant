{
	capital: "Capital",
	tribes: "tribes",
	race1: "Romans",
	race2: "Teutons",
	race3: "Gauls",
	race6: "Egyptians",
	race7: "Huns",
}

TableHelper.stores = function(cell, value) {
	if (isNaN(value)) {
		cell.innerHTML = "&mdash;";
		return;
	}
	if (value <= 20) {
		cell.innerHTML = '<span class="none">1<small>[' + value + ']</small></span>';
	} else {
		cell.innerHTML = Math.ceil(value / 20) + '<span class="none"><small>[' + (value % 20) + ']</small></span>';
	}
}
TableHelper.cellTime = function(cell, v) {
    var r = 10;
    if (parseVersion(state.s).major == 5) {
        r = (v>=1800) ? (v>=7200?300:60) : (v>=600?30:5);
    }
	cell.innerHTML = isNaN(v) ? "&mdash;" : timeI2S(RoundMul(v, r));
}
SummatorHelper.storesDelta = {
	defaultValue: 0,
	func: function(model, field) {
		var ranges = model.getRange();
		var subLowerValue = model.getValue(ranges.low-1, field);
		if (typeof(subLowerValue) == "undefined") {
			subLowerValue = this.defaultValue;
		}
		return 20 * (
			Math.ceil(model.getValue(ranges.high, field)/20) -
			Math.ceil(subLowerValue / 20)
		);
	}
}
SummatorHelper.deltaSmart = {
	defaultValue: 0,
	func: function(model, field) {
		var ranges = model.getRange();
		var subLowerValue = model.getValue(ranges.low-1, field);
		if (typeof(subLowerValue) == "undefined") {
			subLowerValue = this.defaultValue;
		}
		var currentValue = model.getValue(ranges.high, field);
		if (/%$/.test(currentValue)) {
			return (parseInt(currentValue, 10) - parseInt(subLowerValue, 10)) + "%";
		} else {
			var value = currentValue - subLowerValue;
			if (isNaN(value)) {
				return "n/a";
			} else {
				return value;
			}
		}
	}
}
var convertFields = {
	'lvl': TableHelper.trivial,
	'res0': TableHelper.trivial,
	'res1': TableHelper.trivial,
	'res2': TableHelper.trivial,
	'res3': TableHelper.trivial,
	'res_sum': TableHelper.trivial,
	'uc': TableHelper.trivial,
	'wh': TableHelper.stores,
	'gr': TableHelper.stor